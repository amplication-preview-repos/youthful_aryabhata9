/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { GameSession } from "./GameSession";
import { GameSessionCountArgs } from "./GameSessionCountArgs";
import { GameSessionFindManyArgs } from "./GameSessionFindManyArgs";
import { GameSessionFindUniqueArgs } from "./GameSessionFindUniqueArgs";
import { CreateGameSessionArgs } from "./CreateGameSessionArgs";
import { UpdateGameSessionArgs } from "./UpdateGameSessionArgs";
import { DeleteGameSessionArgs } from "./DeleteGameSessionArgs";
import { GameSessionCreateInput } from "./GameSessionCreateInput";
import { GameSessionService } from "../gameSession.service";
@graphql.Resolver(() => GameSession)
export class GameSessionResolverBase {
  constructor(protected readonly service: GameSessionService) {}

  async _gameSessionsMeta(
    @graphql.Args() args: GameSessionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [GameSession])
  async gameSessions(
    @graphql.Args() args: GameSessionFindManyArgs
  ): Promise<GameSession[]> {
    return this.service.gameSessions(args);
  }

  @graphql.Query(() => GameSession, { nullable: true })
  async gameSession(
    @graphql.Args() args: GameSessionFindUniqueArgs
  ): Promise<GameSession | null> {
    const result = await this.service.gameSession(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => GameSession)
  async createGameSession(
    @graphql.Args() args: CreateGameSessionArgs
  ): Promise<GameSession> {
    return await this.service.createGameSession({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => GameSession)
  async updateGameSession(
    @graphql.Args() args: UpdateGameSessionArgs
  ): Promise<GameSession | null> {
    try {
      return await this.service.updateGameSession({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GameSession)
  async deleteGameSession(
    @graphql.Args() args: DeleteGameSessionArgs
  ): Promise<GameSession | null> {
    try {
      return await this.service.deleteGameSession(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Boolean)
  async CheckWin(
    @graphql.Args()
    args: string
  ): Promise<boolean> {
    return this.service.CheckWin(args);
  }

  @graphql.Mutation(() => GameSession)
  async HandleWrongGuess(
    @graphql.Args()
    args: string
  ): Promise<GameSession> {
    return this.service.HandleWrongGuess(args);
  }

  @graphql.Query(() => String)
  async MakeGuess(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.MakeGuess(args);
  }

  @graphql.Mutation(() => GameSession)
  async ResetGame(
    @graphql.Args()
    args: GameSessionCreateInput
  ): Promise<GameSession> {
    return this.service.ResetGame(args);
  }

  @graphql.Mutation(() => UpdateGameSessionArgs)
  async SubmitGuess(
    @graphql.Args()
    args: GameSessionCreateInput
  ): Promise<UpdateGameSessionArgs> {
    return this.service.SubmitGuess(args);
  }
}
