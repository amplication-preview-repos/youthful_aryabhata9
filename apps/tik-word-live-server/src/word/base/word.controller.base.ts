/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { WordService } from "../word.service";
import { WordCreateInput } from "./WordCreateInput";
import { Word } from "./Word";
import { WordFindManyArgs } from "./WordFindManyArgs";
import { WordWhereUniqueInput } from "./WordWhereUniqueInput";
import { WordUpdateInput } from "./WordUpdateInput";

export class WordControllerBase {
  constructor(protected readonly service: WordService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Word })
  async createWord(@common.Body() data: WordCreateInput): Promise<Word> {
    return await this.service.createWord({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
        word: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Word] })
  @ApiNestedQuery(WordFindManyArgs)
  async words(@common.Req() request: Request): Promise<Word[]> {
    const args = plainToClass(WordFindManyArgs, request.query);
    return this.service.words({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
        word: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Word })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async word(
    @common.Param() params: WordWhereUniqueInput
  ): Promise<Word | null> {
    const result = await this.service.word({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
        word: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Word })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateWord(
    @common.Param() params: WordWhereUniqueInput,
    @common.Body() data: WordUpdateInput
  ): Promise<Word | null> {
    try {
      return await this.service.updateWord({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
          word: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Word })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteWord(
    @common.Param() params: WordWhereUniqueInput
  ): Promise<Word | null> {
    try {
      return await this.service.deleteWord({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
          word: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
